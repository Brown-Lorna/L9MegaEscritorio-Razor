@{
    // Validation
    Validation.RequireField("customerName", "You must enter a customer name.");
    Validation.RequireField("deskWidth", "You must enter a desk depth.");
    Validation.RequireField("deskDepth", "You must enter a desk depth.");
    Validation.RequireField("numDrawer", "You must select the number of drawers.");
    Validation.RequireField("deskMaterial", "You must select a material for the desk surface.");
    Validation.RequireField("shipDays", "You must select the number of days for shipping.");
    Validation.Add("deskWidth", Validator.Integer("Width must be an integer."));
    Validation.Add("deskDepth", Validator.Integer("Depth must be an integer."));

    // initial variables
    var CustomerName = "";
    var DeskWidth = "";
    var DeskDepth = "";
    var NumDrawer = "";
    var DeskMaterial = "";
    var ShipDays = "";
    var OrderDate = DateTime.Now;
    var PriceQuote = 0;

    // These integers store the current prices for various desk options.
    int surfaceBaseArea = 1000;
    int SurfaceOveragePrice = 1;
    int pricePerDrawer = 50;
    int deskBasePrice = 200;

    // These are the different surface materials prices.
   // int oakPrice = 200;
  //  int laminatePrice = 100;
  //  int pinePrice = 50;
  //  int cherryPrice = 225;
  //  int walnutPrice = 250;
  //  int maplePrice = 300;

    if (IsPost && Validation.IsValid())
    {

        DeskWidth = Request.Form["deskWidth"];
        DeskDepth = Request.Form["deskDepth"];
        NumDrawer = Request.Form["numDrawer"];
        DeskMaterial = Request.Form["deskMaterial"];
        ShipDays = Request.Form["shipDays"];
        CustomerName = Request.Form["customerName"];
        OrderDate = System.DateTime.Now;


        int deskSurfaceArea = 0;
        int surfaceOverageInches = 0;
        // Calculate the surface area.
        deskSurfaceArea = Convert.ToInt32(DeskWidth) * Convert.ToInt32(DeskDepth);

        // Calculate the surface area overage, if any.
        if (deskSurfaceArea > 1000)
        {
            surfaceOverageInches = deskSurfaceArea - surfaceBaseArea;
        }
        else
        {
            surfaceOverageInches = 0;
        }

        int surfaceOverageCost = surfaceOverageInches * SurfaceOveragePrice;

        int drawerCost = Convert.ToInt32(NumDrawer) * pricePerDrawer;

        var materialCost = 0;

        switch (DeskMaterial)
        {
            case "oak":
                materialCost = 200;
                break;

            case "laminate":
                materialCost = 100;
                break;

            case "pine":
                materialCost = 50;
                break;

            case "cherry":
                materialCost = 225;
                break;

            case "walnut":
                materialCost = 250;
                break;

            case "maple":
                materialCost = 275;
                break;
        }

        int shipCharge = 0;

        switch (ShipDays)
        {
            case "3":
                {
                    if (deskSurfaceArea < 1000)
                    {
                        shipCharge = 60;
                    }
                    else if ((deskSurfaceArea >= 1001) && (deskSurfaceArea <= 1999))
                    {
                        shipCharge = 70;
                    }
                    else
                    {
                        shipCharge = 80;
                    }
                }
                break;

            case "5":
                {
                    if (deskSurfaceArea < 1000)
                    {
                        shipCharge = 40;
                    }
                    else if ((deskSurfaceArea >= 1000) && (deskSurfaceArea <= 1999))
                    {
                        shipCharge = 50;
                    }
                    else
                    {
                        shipCharge = 60;
                    }
                }
                break;

            case "7":
                {
                    if (deskSurfaceArea < 1000)
                    {
                        shipCharge = 30;
                    }
                    else if ((deskSurfaceArea >= 1001) && (deskSurfaceArea <= 1999))
                    {
                        shipCharge = 30;
                    }
                    else
                    {
                        shipCharge = 40;
                    }
                }
                break;

            case "14":
                {
                    shipCharge = 0;
                }
                break;
        }

        PriceQuote = (deskBasePrice + surfaceOverageCost + drawerCost + materialCost + shipCharge);

        var db = Database.Open("MegaEscritorioDeskOrders");
        var insertCommand = "INSERT INTO DeskOrders (deskwidth, deskDepth, numDrawer, deskMaterial, shipDays, customerName, orderDate, priceQuote) VALUES(@0, @1,@2, @3, @4, @5, @6, @7)";
        db.Execute(insertCommand, DeskWidth, DeskDepth, NumDrawer, DeskMaterial, ShipDays, CustomerName, OrderDate, PriceQuote);
        Response.Redirect("~/MegaEscritorio");
    }
    else
    {

    }
}

<!DOCTYPE html>
<html>
    <head>
        <title>Add Desk Order</title>
    </head>
    <body>
        @RenderPage("~/_Nav.cshtml")
        <h1>Add a Desk Order</h1>
        @Html.ValidationSummary()
        <form method="post">
            <fieldset>
                <legend>Enter Order Information</legend>
 
                @Html.Label("Customer Name:")
                @Html.TextBox("customerName", Request.Form["customerName"])
                @Html.ValidationMessage("customerName")
                <br /><br />

                @Html.Label("Desk Width:")
                @Html.TextBox("deskWidth", Request.Form["deskWidth"])
                @Html.ValidationMessage("deskWidth")
                <br /><br />

                @Html.Label("Desk Depth:")
                @Html.TextBox("deskDepth", Request.Form["deskDepth"])
                @Html.ValidationMessage("deskDepth")
                <br /><br />

                @Html.Label("Number of Drawers:")
                <select name="numDrawer">
                    <option value="0">No Drawers</option>
                    <option value="1">1 Drawer ($50)</option>
                    <option value="2">2 Drawers ($100)</option>
                    <option value="3">3 Drawers ($150)</option>
                    <option value="4">4 Drawers ($200)</option>
                    <option value="5">5 Drawers ($250)</option>
                    <option value="6">6 Drawers ($300)</option>
                    <option value="7">7 Drawers ($350)</option>
                </select>
                @Html.ValidationMessage("numDrawer")
                <br /><br />

                @Html.Label("Desk Material:")
                <select id="deskMaterial" name="deskMaterial">
                    <option value="pine">Pine ($50)</option>
                    <option value="laminate">Laminate ($100)</option>
                    <option value="oak">Oak ($200)</option>
                    <option value="cherry">Cherry ($225)</option>
                    <option value="walnut">Walnut ($250)</option>
                    <option value="maple">Maple ($300)</option>
                </select>
                @Html.ValidationMessage("deskMaterial")
                <br /><br />

                @Html.Label("Days to Ship:")
                <select id="shipDays" name="shipDays">
                    <option value="3">3 Days (rush)</option>
                    <option value="5">5 Days (rush)</option>
                    <option value="7">7 Days (rush)</option>
                    <option value="14">14 Days (no rush)</option>
                </select>
                @Html.ValidationMessage("shipDays")
                <br /><br />
                <p>
                    <input class="btn btn-primary" type="submit" name="buttonSubmit" value="Add Desk Order" />
                </p>
            </fieldset>
            <p>
                <a class="btn btn-primary" href="~/MegaEscritorio">Return to Mega Escritorio Orders</a>
            </p>
        </form>
    </body>
</html>
   
